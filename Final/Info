The final modifier applies to classes, methods, and variables. 
The meaning of final varies from context to context, but the essential idea is the same.

A final class can not be inherited
A final variable becomes a constant and its value can not be changed.
A final method can not be overridden. This is done for security reasons, and these methods are used for optimization.
A final class can not be inherited


We must initialize a final variable, otherwise compiler will throw compile-time error.
A final variable can only be initialized once, either via an initializer or an assignment statement. 
There are three ways to initialize a final variable

You can initialize a final variable when it is declared.This approach is the most common. 
A final variable is called blank final variable,if it is not initialized while declaration. 
Below are the two ways to initialize a blank final variable.
A blank final variable can be initialized inside instance-initializer block or inside constructor. 
If you have more than one constructor in your class then it must be initialized in all of them, 
otherwise compile time error will be thrown.
A blank final static variable can be initialized inside static block.

The only difference between a normal variable and a final variable is that we can re-assign value to a normal variable 
but we cannot change the value of a final variable once assigned. Hence final variables must be used only for the values 
that we want to remain constant throughout the execution of program.

Reference final variable :
When a final variable is a reference to an object, then this final variable is called reference final variable. 
For example, a final StringBuffer variable looks like

final StringBuffer sb;


As you know that a final variable cannot be re-assign. But in case of a reference final variable, 
internal state of the object pointed by that reference variable can be changed. Note that this is not re-assigning.


